#ifndef SECRECY_SHARDED_PERMUTATION_GENERATOR_H
#define SECRECY_SHARDED_PERMUTATION_GENERATOR_H

#include "../correlation_generator.h"

namespace secrecy::random {

/**
 * An abstract base class for sharded permutations.
 */
class ShardedPermutation {
   public:
    // virtual destructor
    virtual ~ShardedPermutation() = default;  // make the class polymorphic

    virtual size_t size() = 0;

    virtual std::shared_ptr<ShardedPermutation> clone() = 0;
};

/**
 * An abstract base class for sharded permutation generators.
 */
class ShardedPermutationGenerator : public CorrelationGenerator {
   public:
    // constructor
    ShardedPermutationGenerator(int _rank, std::optional<Communicator*> _comm = std::nullopt)
        : CorrelationGenerator(_rank) {}

    /**
     * getNext - Generate and return a ShardedPermutation.
     * @param n - The size of the permutation.
     */
    virtual std::shared_ptr<ShardedPermutation> getNext(size_t n) = 0;

    /**
     * allocate - Allocate memory for many ShardedPermutations so they can be passed to and
     * generated by the runtime.
     * @param num_permutations - The number of permutations to allocate memory for.
     * @param n - The size of the permutations.
     */
    virtual std::vector<std::shared_ptr<ShardedPermutation>> allocate(
        size_t num_permutations, size_t size_permutation) = 0;

    /**
     * generateBatch - Generate a batch of ShardedPermutations, invoked by the runtime.
     * @param ret - A vector of ShardedPermutations to fill.
     */
    virtual void generateBatch(std::vector<std::shared_ptr<ShardedPermutation>>& ret) = 0;
};

// Template specialization
template <typename T>
struct CorrelationEnumType<T, Correlation::ShardedPermutation> {
    using type = ShardedPermutationGenerator;
};
}  // namespace secrecy::random

#endif  // SECRECY_SHARDED_PERMUTATION_GENERATOR_H
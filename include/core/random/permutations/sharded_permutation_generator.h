#pragma once

#include "../correlation/correlation_generator.h"

namespace orq::random {

/**
 * An abstract base class for sharded permutations.
 */
class ShardedPermutation {
   public:
    // virtual destructor
    virtual ~ShardedPermutation() = default;  // make the class polymorphic

    virtual size_t size() = 0;

    virtual std::shared_ptr<ShardedPermutation> clone() = 0;
};

/**
 * An abstract base class for sharded permutation generators.
 */
class ShardedPermutationGenerator : public CorrelationGenerator {
   public:
    /**
     * Constructor for the base sharded permutation generator.
     * @param _rank The rank of this party.
     * @param _comm Optional communicator.
     */
    ShardedPermutationGenerator(int _rank, std::optional<Communicator*> _comm = std::nullopt)
        : CorrelationGenerator(_rank) {}

    /**
     * Generate and return a ShardedPermutation.
     * @param n The size of the permutation.
     * @return A shared pointer to the generated ShardedPermutation.
     */
    virtual std::shared_ptr<ShardedPermutation> getNext(size_t n) = 0;

    /**
     * Allocate memory for many ShardedPermutations so they can be passed to and
     * generated by the runtime.
     * @param num_permutations The number of permutations to allocate memory for.
     * @param size_permutation The size of the permutations.
     * @return A vector of allocated ShardedPermutations.
     */
    virtual std::vector<std::shared_ptr<ShardedPermutation>> allocate(size_t num_permutations,
                                                                      size_t size_permutation) = 0;

    /**
     * Generate a batch of ShardedPermutations, invoked by the runtime.
     * @param ret A vector of ShardedPermutations to fill.
     */
    virtual void generateBatch(std::vector<std::shared_ptr<ShardedPermutation>>& ret) = 0;
};

// Template specialization
template <typename T>
struct CorrelationEnumType<T, Correlation::ShardedPermutation> {
    using type = ShardedPermutationGenerator;
};
}  // namespace orq::random
